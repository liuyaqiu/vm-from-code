---
- name: Process VM replica configuration and create VMs
  hosts: libvirt_hosts
  become: false
  gather_facts: true

  vars:
    vm_config: "{{ hostvars[target_vm] }}"
    replicas: "{{ vm_config.replicas | default(1) }}"

  tasks:
#    - name: Ensure libvirtd (user) service is running
#      systemd:
#        name: libvirtd
#        state: started
#        enabled: true
#      tags: setup

    - name: Create base images directory
      file:
        path: "{{ base_image_path }}"
        state: directory
        mode: '0755'
      become: false
      tags: setup

    - name: Create secrets directory
      file:
        path: "../secrets"
        state: directory
        mode: '0755'
      delegate_to: localhost
      become: false
      tags: setup

    - name: Check if SSH key already exists
      stat:
        path: "{{ vm_ssh_key_path }}"
      delegate_to: localhost
      become: false
      register: ssh_key_stat
      tags: setup

    - name: Generate ed25519 SSH key for VMs
      command: >
        ssh-keygen -t ed25519
        -f {{ vm_ssh_key_path }}
        -N ""
        -C "libvirt-vms-key"
      delegate_to: localhost
      become: false
      when: not ssh_key_stat.stat.exists
      tags: setup

    - name: Validate replica configuration
      assert:
        that:
          - replicas | int > 0
          - (vm_config.vm_mac_addresses | default([]) | length) == (replicas | int) or replicas == 1
          - (vm_config.vm_static_ips | default([]) | length) == (replicas | int) or replicas == 1
        fail_msg: |
          Invalid replica configuration for {{ target_vm }}:
          - replicas: {{ replicas }}
          - vm_mac_addresses count: {{ vm_config.vm_mac_addresses | default([]) | length }}
          - vm_static_ips count: {{ vm_config.vm_static_ips | default([]) | length }}

          Please ensure:
          1. replicas matches the number of MAC addresses
          2. replicas matches the number of static IPs
      when: replicas | int > 1

    - name: Display replica creation plan
      pause:
        echo: false
        seconds: 1
        prompt: |
          📋 VM Replica Creation Plan:
          Base VM: {{ target_vm }}
          Replicas: {{ replicas }}
          {% if replicas | int > 1 %}
          Will create VMs:
          {% for i in range(replicas | int) %}
          - {{ vm_config.vm_name }}-{{ i }} (IP: {{ vm_config.vm_static_ips[i] }}, MAC: {{ vm_config.vm_mac_addresses[i] }})
          {% endfor %}
          {% else %}
          Will create single VM: {{ vm_config.vm_name }}
          {% endif %}

    - name: Create replica VMs
      include_tasks: create-single-vm.yml
      loop: "{{ range(replicas | int) | list }}"
      loop_control:
        loop_var: replica_index
      vars:
        replica_vm_name: "{{ vm_config.vm_name }}{% if replicas | int > 1 %}-{{ replica_index }}{% endif %}"
        replica_hostname: "{{ vm_config.vm_hostname | default(vm_config.vm_name) }}{% if replicas | int > 1 %}-{{ replica_index }}{% endif %}"
        replica_mac_address: "{% if replicas | int > 1 %}{{ vm_config.vm_mac_addresses[replica_index] }}{% else %}{{ vm_config.vm_mac_address }}{% endif %}"
        replica_static_ip: "{% if replicas | int > 1 %}{{ vm_config.vm_static_ips[replica_index] }}{% else %}{{ vm_config.vm_static_ip }}{% endif %}"

    - name: Display completion summary
      pause:
        echo: false
        seconds: 1
        prompt: |
          ✅ All VM replicas created successfully!

          {% if replicas | int > 1 %}
          Created VMs:
          {% for i in range(replicas | int) %}
          - {{ vm_config.vm_name }}-{{ i }}: ssh vagrant@{{ vm_config.vm_static_ips[i] }}
          {% endfor %}

          Quick access:
          make ssh VM={{ target_vm }}@0  # SSH to first replica
          make ssh VM={{ target_vm }}@1  # SSH to second replica
          {% else %}
          Created VM: {{ vm_config.vm_name }}
          SSH: ssh vagrant@{{ vm_config.vm_static_ip }}
          {% endif %}

    # Post-deployment setup (NVIDIA, Docker, etc.)
    - name: Prepare VMs for post-deployment tasks
      block:
        - name: Wait for VMs to be accessible via SSH
          wait_for:
            host: "{% if replicas | int > 1 %}{{ vm_config.vm_static_ips[item] }}{% else %}{{ vm_config.vm_static_ip }}{% endif %}"
            port: 22
            delay: 10
            timeout: 300
            state: started
          delegate_to: localhost
          become: false
          loop: "{{ range(replicas | int) | list }}"
          when: vm_config.install_nvidia | default(false) | bool or vm_config.install_docker | default(false) | bool or (vm_config.custom_packages | default([]) | length > 0) or (vm_config.post_install_script | default('') | length > 0)

        - name: Add VMs to in-memory inventory for post-deployment tasks
          add_host:
            name: "{% if replicas | int > 1 %}{{ vm_config.vm_name }}-{{ item }}{% else %}{{ vm_config.vm_name }}{% endif %}"
            ansible_host: "{% if replicas | int > 1 %}{{ vm_config.vm_static_ips[item] }}{% else %}{{ vm_config.vm_static_ip }}{% endif %}"
            ansible_user: "{{ vm_ssh_user }}"
            ansible_ssh_private_key_file: "{{ vm_ssh_key_path }}"
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            install_nvidia: "{{ vm_config.install_nvidia | default(false) }}"
            cuda_version: "{{ vm_config.cuda_version | default('13.0') }}"
            install_docker: "{{ vm_config.install_docker | default(false) }}"
            custom_packages: "{{ vm_config.custom_packages | default([]) }}"
            post_install_script: "{{ vm_config.post_install_script | default('') }}"
            groups: replica_vms
          loop: "{{ range(replicas | int) | list }}"
          when: vm_config.install_nvidia | default(false) | bool or vm_config.install_docker | default(false) | bool or (vm_config.custom_packages | default([]) | length > 0) or (vm_config.post_install_script | default('') | length > 0)
      when: vm_config.install_nvidia | default(false) | bool or vm_config.install_docker | default(false) | bool or (vm_config.custom_packages | default([]) | length > 0) or (vm_config.post_install_script | default('') | length > 0)
      tags: [post-deploy]

    - name: Display NVIDIA installation starting message
      pause:
        echo: false
        seconds: 1
        prompt: |
          ⏳ Starting NVIDIA driver and CUDA {{ vm_config.cuda_version | default('13.0') }} installation on all replicas...
          This will take several minutes and requires a reboot.
      when: vm_config.install_nvidia | default(false) | bool
      tags: [nvidia, post-deploy]

- name: Wait for VMs to be ready for post-deployment
  hosts: replica_vms
  become: true
  gather_facts: false
  ignore_unreachable: yes
  serial: 1

  tasks:
    - name: Wait for cloud-init to complete
      command: cloud-init status --wait
      register: cloud_init_status
      changed_when: false
      failed_when: false
      timeout: 600

    - name: Wait for apt/dpkg locks to be released
      shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
          echo "Waiting for dpkg/apt locks to be released..."
          sleep 2
        done
      changed_when: false
      timeout: 300

    - name: Display VM readiness
      debug:
        msg: "✅ {{ inventory_hostname }} is ready for post-deployment tasks"

- name: Post-deployment NVIDIA setup
  hosts: replica_vms
  become: true
  gather_facts: true
  ignore_unreachable: yes
  serial: 1

  tasks:
    - name: Install NVIDIA drivers and CUDA
      block:
        - name: Download CUDA repository keyring
          get_url:
            url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
            dest: /tmp/cuda-keyring_1.1-1_all.deb
            mode: '0644'

        - name: Install CUDA repository keyring
          apt:
            deb: /tmp/cuda-keyring_1.1-1_all.deb
            state: present
          register: cuda_keyring_result
          until: cuda_keyring_result is succeeded
          retries: 5
          delay: 10

        - name: Update apt cache
          apt:
            update_cache: yes
          register: apt_cache_result
          until: apt_cache_result is succeeded
          retries: 5
          delay: 10

        - name: Install NVIDIA drivers and CUDA toolkit (silent installation)
          apt:
            name:
              - libnvidia-compute-580
              - nvidia-dkms-580-open
              - cuda-toolkit
              - nvidia-gds
            state: present
            install_recommends: yes
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: nvidia_install_result
          until: nvidia_install_result is succeeded
          retries: 5
          delay: 10

        - name: Hold NVIDIA and CUDA packages to prevent auto-updates
          dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - libnvidia-compute-580
            - nvidia-dkms-580-open
            - cuda-toolkit
            - nvidia-gds

        - name: Create CUDA environment configuration
          copy:
            dest: /etc/profile.d/cuda.sh
            mode: '0644'
            content: |
              # CUDA environment configuration
              export PATH=${PATH}:/usr/local/cuda-{{ cuda_version | default('13.0') }}/bin
              export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda-{{ cuda_version | default('13.0') }}/lib64

        - name: Display pre-reboot message
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ NVIDIA drivers and CUDA toolkit installed successfully on {{ inventory_hostname }}
              🔄 Rebooting VM to load NVIDIA kernel modules...

        - name: Reboot VM to load NVIDIA drivers
          reboot:
            reboot_timeout: 600
            msg: "Rebooting to load NVIDIA drivers"

        - name: Wait for VM to come back online after reboot
          wait_for_connection:
            delay: 10
            timeout: 300

        - name: Verify NVIDIA driver installation
          command: /usr/bin/nvidia-smi
          register: nvidia_smi_output
          changed_when: false
          failed_when: nvidia_smi_output.rc != 0

        - name: Verify CUDA compiler installation
          shell: /usr/local/cuda-{{ cuda_version | default('13.0') }}/bin/nvcc --version
          register: nvcc_output
          changed_when: false
          failed_when: nvcc_output.rc != 0

        - name: Display NVIDIA installation success
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ NVIDIA driver and CUDA installation completed successfully on {{ inventory_hostname }}!

              === nvidia-smi output ===
              {{ nvidia_smi_output.stdout }}

              === nvcc version ===
              {{ nvcc_output.stdout }}

              📦 Installed packages are locked (held) to prevent auto-updates
              🔧 CUDA environment variables configured in /etc/profile.d/cuda.sh

      rescue:
        - name: Display NVIDIA installation failure
          fail:
            msg: |
              ❌ NVIDIA driver and CUDA installation failed on {{ inventory_hostname }}!

              Please check the VM logs for details:
              ssh {{ ansible_user }}@{{ ansible_host }}
              sudo journalctl -xe

              You can also check DKMS build logs:
              sudo dkms status
      when: install_nvidia | default(false) | bool
      tags: [nvidia, post-deploy]

- name: Post-deployment Docker Engine setup
  hosts: replica_vms
  become: true
  gather_facts: true
  ignore_unreachable: yes
  serial: 1

  tasks:
    - name: Install Docker Engine
      block:
        - name: Install prerequisites for Docker repository
          apt:
            name:
              - ca-certificates
              - curl
            state: present
            update_cache: yes
          register: apt_prereq_result
          until: apt_prereq_result is succeeded
          retries: 5
          delay: 10

        - name: Create directory for apt keyrings
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Download Docker GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker.asc
            mode: '0644'

        - name: Get system architecture
          command: dpkg --print-architecture
          register: system_arch
          changed_when: false

        - name: Get Ubuntu codename
          shell: . /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}"
          register: ubuntu_codename
          changed_when: false

        - name: Add Docker repository to apt sources
          apt_repository:
            repo: "deb [arch={{ system_arch.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable"
            filename: docker
            state: present

        - name: Update apt cache after adding Docker repository
          apt:
            update_cache: yes
          register: apt_update_result
          until: apt_update_result is succeeded
          retries: 5
          delay: 10

        - name: Install Docker Engine and plugins
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            install_recommends: yes
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: docker_install_result
          until: docker_install_result is succeeded
          retries: 5
          delay: 10

        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Verify Docker service is running
          systemd:
            name: docker
          register: docker_service_status

        - name: Ensure docker group exists
          group:
            name: docker
            state: present

        - name: Add vagrant user to docker group for non-root access
          user:
            name: vagrant
            groups: docker
            append: yes

        - name: Verify Docker installation with hello-world
          shell: docker run --rm hello-world
          register: docker_hello_output
          changed_when: false

        - name: Display Docker installation success
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ Docker Engine installation completed successfully on {{ inventory_hostname }}!

              === Docker Version ===
              {{ docker_hello_output.stdout }}

              === Docker Service Status ===
              Docker service is {{ docker_service_status.status.ActiveState }}

              ℹ️  User 'vagrant' has been added to docker group
              ℹ️  To use Docker without sudo, log out and back in, or run: newgrp docker

              🔧 Docker Compose is available as 'docker compose' (plugin)

      rescue:
        - name: Display Docker installation failure
          fail:
            msg: |
              ❌ Docker Engine installation failed on {{ inventory_hostname }}!

              Please check the VM logs for details:
              ssh {{ ansible_user }}@{{ ansible_host }}
              sudo journalctl -u docker.service -xe

              Check Docker service status:
              sudo systemctl status docker
      when: install_docker | default(false) | bool
      tags: [docker, post-deploy]

- name: Post-deployment custom package installation
  hosts: replica_vms
  become: true
  gather_facts: true
  ignore_unreachable: yes
  serial: 1

  tasks:
    - name: Install custom deb packages from URLs
      block:
        - name: Download custom deb package
          get_url:
            url: "{{ item.url }}"
            dest: "/tmp/{{ item.name }}"
            mode: '0644'
          loop: "{{ custom_packages }}"
          when: custom_packages | default([]) | length > 0

        - name: Install custom deb package
          apt:
            deb: "/tmp/{{ item.name }}"
            state: present
          loop: "{{ custom_packages }}"
          when: custom_packages | default([]) | length > 0
          register: apt_install_result
          until: apt_install_result is succeeded
          retries: 10
          delay: 10

        - name: Clean up downloaded deb packages
          file:
            path: "/tmp/{{ item.name }}"
            state: absent
          loop: "{{ custom_packages }}"
          when: custom_packages | default([]) | length > 0

        - name: Display custom package installation success
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ Custom packages installed successfully on {{ inventory_hostname }}!
              {% for pkg in custom_packages %}
              - {{ pkg.name }}
              {% endfor %}
          when: custom_packages | default([]) | length > 0

      rescue:
        - name: Display custom package installation failure
          fail:
            msg: |
              ❌ Custom package installation failed on {{ inventory_hostname }}!

              Please check the VM for details:
              ssh {{ ansible_user }}@{{ ansible_host }}
      when: custom_packages | default([]) | length > 0
      tags: [custom-packages, post-deploy]

- name: Post-installation script execution
  hosts: replica_vms
  become: true
  gather_facts: true
  ignore_unreachable: yes
  serial: 1

  tasks:
    - name: Execute post-installation script
      block:
        - name: Check if post-install script is a file path
          stat:
            path: "{{ post_install_script }}"
          delegate_to: localhost
          become: false
          register: script_file_stat
          when: post_install_script | default('') | length > 0

        - name: Copy local script file to VM
          copy:
            src: "{{ post_install_script }}"
            dest: "/tmp/post-install.sh"
            mode: '0755'
          when:
            - post_install_script | default('') | length > 0
            - script_file_stat.stat.exists | default(false)

        - name: Create inline script on VM
          copy:
            content: "{{ post_install_script }}"
            dest: "/tmp/post-install.sh"
            mode: '0755'
          when:
            - post_install_script | default('') | length > 0
            - not (script_file_stat.stat.exists | default(false))

        - name: Execute post-installation script
          shell: /tmp/post-install.sh
          register: script_output
          when: post_install_script | default('') | length > 0

        - name: Display post-installation script output
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ Post-installation script executed successfully on {{ inventory_hostname }}!

              === Script Output ===
              {{ script_output.stdout }}

              {% if script_output.stderr %}
              === Script Errors (if any) ===
              {{ script_output.stderr }}
              {% endif %}
          when: post_install_script | default('') | length > 0

        - name: Clean up post-installation script
          file:
            path: "/tmp/post-install.sh"
            state: absent
          when: post_install_script | default('') | length > 0

        - name: Display pre-reboot message
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ post-install script run successfully on {{ inventory_hostname }}
              🔄 Rebooting VM...

        - name: Reboot VM after post-install
          reboot:
            reboot_timeout: 600
            msg: "Rebooting after post-install"

        - name: Wait for VM to come back online after reboot
          wait_for_connection:
            delay: 10
            timeout: 300

      rescue:
        - name: Display post-installation script failure
          fail:
            msg: |
              ❌ Post-installation script execution failed on {{ inventory_hostname }}!

              Script output:
              {{ script_output.stdout | default('') }}

              Script errors:
              {{ script_output.stderr | default('') }}

              Please check the VM for details:
              ssh {{ ansible_user }}@{{ ansible_host }}
      when: post_install_script | default('') | length > 0
      tags: [post-install-script, post-deploy]
