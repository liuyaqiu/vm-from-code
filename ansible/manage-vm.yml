---
- name: Manage libvirt VMs (start/stop/restart)
  hosts: libvirt_hosts
  become: true
  gather_facts: false
  
  vars:
    vm_config: "{{ hostvars[target_vm] }}"
    
  tasks:
    - name: Check if VM exists
      community.libvirt.virt:
        command: info
        name: "{{ vm_config.vm_name }}"
        uri: "{{ libvirt_uri | default('qemu:///system') }}"
      register: vm_info
      tags: check

    - name: Fail if VM doesn't exist
      fail:
        msg: "VM '{{ vm_config.vm_name }}' does not exist. Create it first."
      when: vm_info is failed
      tags: check

    - name: Start VM
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: running
        uri: "{{ libvirt_uri | default('qemu:///system') }}"
      when: action == 'start'
      tags: start

    - name: Stop VM (graceful shutdown)
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: shutdown
        uri: "{{ libvirt_uri | default('qemu:///system') }}"
      when: action == 'stop'
      tags: stop

    - name: Force stop VM
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: destroyed
        uri: "{{ libvirt_uri | default('qemu:///system') }}"
      when: action == 'force-stop'
      tags: force-stop

    - name: Restart VM
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: restarted
        uri: "{{ libvirt_uri | default('qemu:///system') }}"
      when: action == 'restart'
      tags: restart

    - name: Get VM status
      community.libvirt.virt:
        command: status
        name: "{{ vm_config.vm_name }}"
        uri: "{{ libvirt_uri | default('qemu:///system') }}"
      register: vm_status
      when: action != 'delete-bridge'
      tags: status

    - name: Display VM status
      pause:
        seconds: 1
        prompt: |
          VM '{{ vm_config.vm_name }}' is {{ vm_status.status }}
      when: action != 'delete-bridge'
      tags: status

    - name: Delete bridge network from host
      block:
        - name: Check if VM uses a bridge
          fail:
            msg: "VM '{{ vm_config.vm_name }}' does not use a bridge network"
          when: vm_config.vm_bridge is not defined

        - name: Check if netplan config exists
          stat:
            path: /etc/netplan/01-{{ vm_config.vm_bridge }}.yaml
          register: netplan_config_stat

        - name: Get bridge interface details
          command: ip link show {{ vm_config.vm_bridge }}
          register: bridge_info
          ignore_errors: true
          changed_when: false

        - name: Remove netplan bridge configuration
          file:
            path: /etc/netplan/01-{{ vm_config.vm_bridge }}.yaml
            state: absent
          when: netplan_config_stat.stat.exists

        - name: Restore original interface configuration
          copy:
            dest: /etc/netplan/01-{{ vm_config.vm_bridge }}.yaml
            mode: '0644'
            content: |
              network:
                version: 2
                renderer: networkd
                ethernets:
                  {{ vm_config.vm_bridge_interface }}:
                    dhcp4: yes
          when:
            - netplan_config_stat.stat.exists
            - vm_config.vm_bridge_interface is defined

        - name: Apply netplan to remove bridge
          command: netplan apply
          when: netplan_config_stat.stat.exists

        - name: Display bridge deletion status
          pause:
            echo: false
            seconds: 1
            prompt: |
              ✅ Bridge {{ vm_config.vm_bridge }} has been removed
              ✅ Interface {{ vm_config.vm_bridge_interface | default('unknown') }} restored to DHCP
      when: action == 'delete-bridge'
      tags: delete-bridge
