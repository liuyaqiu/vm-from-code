---
- name: Manage libvirt VMs (start/stop/restart)
  hosts: libvirt_hosts
  become: true
  gather_facts: false
  
  vars:
    vm_config: "{{ hostvars[target_vm] }}"
    
  tasks:
    - name: Check if VM exists
      community.libvirt.virt:
        command: info
        name: "{{ vm_config.vm_name }}"
        uri: "{{ libvirt_uri | default('qemu:///session') }}"
      register: vm_info
      tags: check

    - name: Fail if VM doesn't exist
      fail:
        msg: "VM '{{ vm_config.vm_name }}' does not exist. Create it first."
      when: vm_info is failed
      tags: check

    - name: Start VM
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: running
        uri: "{{ libvirt_uri | default('qemu:///session') }}"
      when: action == 'start'
      tags: start

    - name: Stop VM (graceful shutdown)
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: shutdown
        uri: "{{ libvirt_uri | default('qemu:///session') }}"
      when: action == 'stop'
      tags: stop

    - name: Force stop VM
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: destroyed
        uri: "{{ libvirt_uri | default('qemu:///session') }}"
      when: action == 'force-stop'
      tags: force-stop

    - name: Restart VM
      community.libvirt.virt:
        name: "{{ vm_config.vm_name }}"
        state: restarted
        uri: "{{ libvirt_uri | default('qemu:///session') }}"
      when: action == 'restart'
      tags: restart

    - name: Get VM status
      community.libvirt.virt:
        command: status
        name: "{{ vm_config.vm_name }}"
        uri: "{{ libvirt_uri | default('qemu:///session') }}"
      register: vm_status
      tags: status

    - name: Display VM status
      pause:
        seconds: 1
        prompt: |
          VM '{{ vm_config.vm_name }}' is {{ vm_status.status }}
      tags: status
