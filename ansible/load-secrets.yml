---
# Secret Management Playbook
# Manages encryption/decryption of files in ../secrets/ directory
#
# Files ending with .encrypted are considered encrypted versions
# This playbook will:
# 1. Decrypt .encrypted files if the plain version doesn't exist
# 2. Can be run with cleanup=true to remove decrypted files
#
# Usage:
#   ansible-playbook load-secrets.yml --vault-password-file ~/.ansible/pve-vault-pass
#   ansible-playbook load-secrets.yml -e cleanup=true --vault-password-file ~/.ansible/pve-vault-pass

- name: Load and manage secrets
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    secrets_dir: "../secrets"
    cleanup_mode: "{{ cleanup | default(false) | bool }}"

  tasks:
    - name: Ensure secrets directory exists
      file:
        path: "{{ secrets_dir }}"
        state: directory
        mode: '0700'
      tags: [always]

    - name: Find all encrypted secret files
      find:
        paths: "{{ secrets_dir }}"
        patterns: "*.encrypted"
        file_type: file
      register: encrypted_files
      tags: [decrypt]

    - name: Display encrypted files found
      pause:
        echo: false
        seconds: 1
        prompt: |
          Found {{ encrypted_files.files | length }} encrypted files
      when: encrypted_files.files | length > 0
      tags: [decrypt]

    - name: Decrypt encrypted files if plain version doesn't exist
      block:
        - name: Check if decrypted versions exist
          stat:
            path: "{{ item.path | regex_replace('.encrypted$', '') }}"
          loop: "{{ encrypted_files.files }}"
          register: decrypted_files_check
          tags: [decrypt]

        - name: Decrypt files where plain version is missing
          shell: |
            ansible-vault decrypt \
              --vault-password-file {{ lookup('env', 'HOME') }}/.ansible/pve-vault-pass \
              --output="{{ item.item.path | regex_replace('.encrypted$', '') }}" \
              "{{ item.item.path }}"
          loop: "{{ decrypted_files_check.results }}"
          when:
            - not item.stat.exists
            - encrypted_files.files | length > 0
          no_log: false
          register: decrypt_result
          changed_when: decrypt_result.rc == 0
          failed_when: decrypt_result.rc != 0 and 'already decrypted' not in decrypt_result.stderr
          tags: [decrypt]

        - name: Set permissions on decrypted files
          file:
            path: "{{ item.item.path | regex_replace('.encrypted$', '') }}"
            mode: '0600'
          loop: "{{ decrypted_files_check.results }}"
          when:
            - not item.stat.exists
            - encrypted_files.files | length > 0
          tags: [decrypt]

        - name: Display decryption summary
          pause:
            echo: false
            seconds: 1
            prompt: |
              Decryption complete:
              - Total encrypted files: {{ encrypted_files.files | length }}
              - Files decrypted: {{ decrypt_result.results | selectattr('changed', 'equalto', true) | list | length }}
              - Already decrypted: {{ decrypted_files_check.results | selectattr('stat.exists', 'equalto', true) | list | length }}
          when: encrypted_files.files | length > 0
          tags: [decrypt]
      when: not cleanup_mode

    - name: Cleanup decrypted files (security cleanup)
      block:
        - name: Find all plain secret files (decrypted)
          find:
            paths: "{{ secrets_dir }}"
            patterns: "*"
            excludes: "*.encrypted"
            file_type: file
          register: plain_files
          tags: [cleanup]

        - name: Check if encrypted versions exist for plain files
          stat:
            path: "{{ item.path }}.encrypted"
          loop: "{{ plain_files.files }}"
          register: encrypted_versions_check
          tags: [cleanup]

        - name: Encrypt files that don't have encrypted versions
          shell: |
            ansible-vault encrypt \
              --vault-password-file {{ lookup('env', 'HOME') }}/.ansible/pve-vault-pass \
              --output="{{ item.item.path }}.encrypted" \
              "{{ item.item.path }}"
          loop: "{{ encrypted_versions_check.results }}"
          when: not item.stat.exists
          register: encrypt_result
          changed_when: encrypt_result.rc == 0
          tags: [cleanup]

        - name: Remove decrypted files that have encrypted versions
          file:
            path: "{{ item.item.path }}"
            state: absent
          loop: "{{ encrypted_versions_check.results }}"
          when: item.stat.exists
          tags: [cleanup]

        - name: Remove newly decrypted files after encryption
          file:
            path: "{{ item.item.path }}"
            state: absent
          loop: "{{ encrypted_versions_check.results }}"
          when: not item.stat.exists and encrypt_result is defined
          tags: [cleanup]

        - name: Display cleanup summary
          pause:
            echo: false
            seconds: 1
            prompt: |
              Cleanup complete:
              - Total plain files: {{ plain_files.files | length }}
              - Files removed (already encrypted): {{ encrypted_versions_check.results | selectattr('stat.exists', 'equalto', true) | list | length }}
              - Files encrypted + removed (newly encrypted): {{ encrypted_versions_check.results | rejectattr('stat.exists', 'equalto', true) | list | length }}

              Newly encrypted files:
              {% for item in encrypted_versions_check.results %}
              {% if not item.stat.exists %}
              - {{ item.item.path | basename }} -> {{ item.item.path | basename }}.encrypted
              {% endif %}
              {% endfor %}

              All secret files now have encrypted versions in {{ secrets_dir }}/
          tags: [cleanup]
      when: cleanup_mode

    - name: Display usage information
      pause:
        echo: false
        seconds: 1
        prompt: |
          ===== Secret Management Status =====

          Secrets directory: {{ secrets_dir }}
          Mode: {{ 'CLEANUP' if cleanup_mode else 'DECRYPT' }}

          {% if not cleanup_mode %}
          Encrypted files ready for use. Plain versions available in {{ secrets_dir }}/
          {% else %}
          Decrypted files have been removed. Only encrypted versions remain.
          {% endif %}

          ===== Available Commands =====

          Decrypt secrets:
            make load-secrets

          Cleanup decrypted files:
            make cleanup-secrets

          Encrypt a new secret:
            ansible-vault encrypt secrets/your-file --vault-password-file ~/.ansible/pve-vault-pass
            mv secrets/your-file secrets/your-file.encrypted
      tags: [always]
