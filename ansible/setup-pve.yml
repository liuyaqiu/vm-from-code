---
- name: Check and setup SSH key access to PVE node
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - group_vars/all.yml
    - group_vars/pve.yml

  tasks:
    - name: Check if SSH key exists locally
      stat:
        path: "{{ vm_ssh_key_path }}"
      register: local_ssh_key_stat

    - name: Test SSH key authentication to PVE
      command: ssh -i {{ vm_ssh_key_path }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o BatchMode=yes -o ConnectTimeout=5 root@{{ pve_api_host }} echo "SSH key works"
      register: ssh_test
      changed_when: false
      failed_when: false
      when: local_ssh_key_stat.stat.exists

    - name: Set SSH key authentication status
      set_fact:
        ssh_key_configured: "{{ ssh_test.rc is defined and ssh_test.rc == 0 }}"
      when: local_ssh_key_stat.stat.exists

    - name: Display SSH key setup message
      pause:
        echo: false
        seconds: 1
        prompt: |

          üîê SSH Key Access Required

          SSH key authentication to {{ pve_api_host }} is not configured yet.
          You will be prompted for the root password to set up SSH key access (one-time setup).

          Press Enter to continue...
      when: not (ssh_key_configured | default(false))

    - name: Prompt for PVE root password (hidden input)
      pause:
        prompt: "Root password for {{ pve_api_host }}"
        echo: false
      register: pve_password_prompt
      when: not (ssh_key_configured | default(false))
      no_log: true

    - name: Add PVE host for SSH key setup
      add_host:
        name: pve_ssh_setup
        ansible_host: "{{ pve_api_host }}"
        ansible_user: root
        ansible_password: "{{ pve_password_prompt.user_input }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      when: not (ssh_key_configured | default(false))
      no_log: true

- name: Copy SSH key to PVE host
  hosts: pve_ssh_setup
  gather_facts: false
  become: false

  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Read SSH public key
      slurp:
        src: "{{ vm_ssh_public_key_path }}"
      register: ssh_pub_key_content
      delegate_to: localhost
      become: false

    - name: Ensure .ssh directory exists on PVE
      file:
        path: /root/.ssh
        state: directory
        mode: '0700'

    - name: Add SSH public key to authorized_keys
      lineinfile:
        path: /root/.ssh/authorized_keys
        line: "{{ ssh_pub_key_content.content | b64decode | trim }}"
        create: true
        mode: '0600'
        state: present

    - name: Display SSH key setup success
      pause:
        echo: false
        seconds: 1
        prompt: |
          ‚úÖ SSH key added to {{ ansible_host }}

          Future operations will use key-based authentication (no password needed).
      delegate_to: localhost

- name: Setup Proxmox VE for VM provisioning
  hosts: localhost
  gather_facts: true
  become: false

  vars_files:
    - group_vars/all.yml
    - group_vars/pve.yml

  tasks:
    - name: Display PVE setup information
      pause:
        echo: false
        seconds: 1
        prompt: |
          üîß Proxmox VE Setup

          Target PVE Node: {{ pve_api_host }}
          Source Image: {{ source_image_path }}
          Destination: /var/lib/vz/template/qcow/{{ base_image_name }}

          This will:
          1. Install proxmoxer Python library (required for PVE modules)
          2. Verify PVE API connectivity
          3. Upload base qcow2 image to PVE node

          Press Ctrl+C to abort or wait to continue...

    - name: Install required Python libraries for PVE provisioning
      pip:
        name:
          - proxmoxer
          - requests
        state: present
      delegate_to: localhost
      become: false
      tags: [dependencies]

    - name: Verify PVE API connectivity
      uri:
        url: "https://{{ pve_api_host }}:8006/api2/json/version"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ pve_api_user }}!{{ pve_api_token_id }}={{ pve_api_token_secret }}"
        validate_certs: false
      register: pve_version
      tags: [verify]

    - name: Display PVE version information
      pause:
        echo: false
        seconds: 1
        prompt: |
          ‚úÖ Successfully connected to Proxmox VE!

          Version: {{ pve_version.json.data.version }}
          Release: {{ pve_version.json.data.release }}
      tags: [verify]

    - name: Check if source image exists locally
      stat:
        path: "{{ source_image_path }}"
      register: source_image_stat
      tags: [image]

    - name: Fail if source image doesn't exist
      fail:
        msg: |
          ‚ùå Source image not found: {{ source_image_path }}

          Please build the image first:
          cd packer && make build
      when: not source_image_stat.stat.exists
      tags: [image]

    - name: Display image upload plan
      pause:
        echo: false
        seconds: 1
        prompt: |
          üì¶ Uploading base image to PVE node...

          Source: {{ source_image_path }}
          Size: {{ (source_image_stat.stat.size / 1024 / 1024) | round(1) }}MB
          Destination: {{ pve_api_host }}:/var/lib/vz/template/qcow/{{ base_image_name }}

          This may take several minutes depending on network speed...
      when: source_image_stat.stat.exists
      tags: [image]

    - name: Add PVE node to inventory for file copy
      add_host:
        name: pve_target
        ansible_host: "{{ pve_api_host }}"
        ansible_user: root
        ansible_ssh_private_key_file: "{{ lookup('env', 'PVE_SSH_KEY') | default(vm_ssh_key_path, true) }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      tags: [image]

- name: Upload base image to PVE node
  hosts: pve_target
  gather_facts: false
  become: true

  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Create qcow template directory if it doesn't exist
      file:
        path: /var/lib/vz/template/qcow
        state: directory
        mode: '0755'
      tags: [image]

    - name: Check if base image already exists on PVE
      stat:
        path: "/var/lib/vz/template/qcow/{{ base_image_name }}"
      register: pve_image_stat
      tags: [image]

    - name: Upload base image to PVE node
      copy:
        src: "{{ source_image_path }}"
        dest: "/var/lib/vz/template/qcow/{{ base_image_name }}"
        mode: '0644'
      when: not pve_image_stat.stat.exists or (force_upload | default(false))
      tags: [image]

    - name: Skip upload if image already exists
      pause:
        echo: false
        seconds: 1
        prompt: |
          ‚ÑπÔ∏è  Base image already exists on PVE node

          Path: /var/lib/vz/template/qcow/{{ base_image_name }}
          Size: {{ (pve_image_stat.stat.size / 1024 / 1024) | round(1) }}MB

          To force re-upload, run with: -e force_upload=true
      when: pve_image_stat.stat.exists and not (force_upload | default(false))
      tags: [image]

- name: PVE setup completion
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - group_vars/pve.yml

  tasks:
    - name: Display setup completion message
      pause:
        echo: false
        seconds: 1
        prompt: |
          ‚úÖ Proxmox VE setup completed successfully!

          PVE Node: {{ pve_api_host }}
          Base Image: /var/lib/vz/template/qcow/{{ base_image_name }}

          You can now create VMs with:
          make ansible-create-pve target_vm=<vm-name>

          Example inventory configuration:
          ---
          k8s-master-pve:
            provisioner: pve
            pve_node: "{{ pve_node }}"
            pve_storage: "local-lvm"
            pve_vmid_start: 200
            vm_name: "k8s-master"
            replicas: 3
            vm_mac_addresses: ["52:54:00:88:00:10", ...]
            vm_static_ips: ["192.168.88.10", ...]
